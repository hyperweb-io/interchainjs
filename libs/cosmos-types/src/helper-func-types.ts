/**
* This file and any referenced files were automatically generated by @hyperweb/telescope@2.0.1
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or npm scripts command that is used to regenerate this bundle.
*/


import { HttpEndpoint } from "@interchainjs/types";
import { BinaryReader, BinaryWriter } from "./binary";
import { isRpc, Rpc } from "./helpers";

export interface QueryBuilderOptions<TReq, TRes> {
  encode: (request: TReq, writer?: BinaryWriter) => BinaryWriter
  decode: (input: BinaryReader | Uint8Array, length?: number) => TRes
  service: string,
  method: string,
}

export function buildQuery<TReq, TRes>(opts: QueryBuilderOptions<TReq, TRes>) {
    return async (client: EndpointOrRpc, request: TReq) => {
      let rpc: Rpc | undefined;

      if(isRpc(client)) {
        rpc = client;
      } else {
        rpc = undefined;
      }

      if (!rpc) throw new Error("Query Rpc is not initialized");

      const data = opts.encode(request).finish();
      const response = await rpc.request(opts.service, opts.method, data);
      return opts.decode(response);
    };
}



export interface Encoder {
  typeUrl: string;
  fromPartial: (data: any) => any;
  encode: (data: any) => Uint8Array;
}

export interface AminoConverter {
  typeUrl: string;
  aminoType: string;
  fromAmino: (data: any) => any;
  toAmino: (data: any) => any;
}

export type EndpointOrRpc = string | HttpEndpoint | Rpc ;
